
Image2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e44  08002988  08002988  00003988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077cc  080077cc  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  080077cc  080077cc  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077cc  080077cc  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077cc  080077cc  000087cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077d0  080077d0  000087d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080077d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080077e0  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080077e0  00009110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b268  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eff  00000000  00000000  0001429d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000161a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000966  00000000  00000000  00016dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017290  00000000  00000000  00017736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d625  00000000  00000000  0002e9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865d9  00000000  00000000  0003bfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c25c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003250  00000000  00000000  000c2608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c5858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002970 	.word	0x08002970

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002970 	.word	0x08002970

0800014c <ILI9341Reset>:

/**
 * The ILI9341Reset function resets the ILI9341 display by toggling the reset pin.
 */
void ILI9341Reset(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2101      	movs	r1, #1
 8000154:	4808      	ldr	r0, [pc, #32]	@ (8000178 <ILI9341Reset+0x2c>)
 8000156:	f001 f9a1 	bl	800149c <HAL_GPIO_WritePin>
	DELAY_Tim_Ms(&htim1, 200UL);
 800015a:	21c8      	movs	r1, #200	@ 0xc8
 800015c:	4807      	ldr	r0, [pc, #28]	@ (800017c <ILI9341Reset+0x30>)
 800015e:	f000 fa18 	bl	8000592 <DELAY_Tim_Ms>
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 8000162:	2201      	movs	r2, #1
 8000164:	2101      	movs	r1, #1
 8000166:	4804      	ldr	r0, [pc, #16]	@ (8000178 <ILI9341Reset+0x2c>)
 8000168:	f001 f998 	bl	800149c <HAL_GPIO_WritePin>
	DELAY_Tim_Ms(&htim1, 200UL);
 800016c:	21c8      	movs	r1, #200	@ 0xc8
 800016e:	4803      	ldr	r0, [pc, #12]	@ (800017c <ILI9341Reset+0x30>)
 8000170:	f000 fa0f 	bl	8000592 <DELAY_Tim_Ms>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800
 800017c:	200000c4 	.word	0x200000c4

08000180 <ILI9341Init>:
/**
 * The ILI9341Init function initializes an ILI9341 display module with a series of commands and data
 * writes.
 */
void ILI9341Init(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	2104      	movs	r1, #4
 8000188:	4886      	ldr	r0, [pc, #536]	@ (80003a4 <ILI9341Init+0x224>)
 800018a:	f001 f987 	bl	800149c <HAL_GPIO_WritePin>

	WriteCommand(0x01U);
 800018e:	2001      	movs	r0, #1
 8000190:	f000 f960 	bl	8000454 <WriteCommand>
	DELAY_Tim_Ms(&htim1, 1000UL);
 8000194:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000198:	4883      	ldr	r0, [pc, #524]	@ (80003a8 <ILI9341Init+0x228>)
 800019a:	f000 f9fa 	bl	8000592 <DELAY_Tim_Ms>
	WriteCommand(0xCBU);
 800019e:	20cb      	movs	r0, #203	@ 0xcb
 80001a0:	f000 f958 	bl	8000454 <WriteCommand>
	WriteData(0x39U);
 80001a4:	2039      	movs	r0, #57	@ 0x39
 80001a6:	f000 f96d 	bl	8000484 <WriteData>
	WriteData(0x2CU);
 80001aa:	202c      	movs	r0, #44	@ 0x2c
 80001ac:	f000 f96a 	bl	8000484 <WriteData>
	WriteData(0x00U);
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 f967 	bl	8000484 <WriteData>
	WriteData(0x34U);
 80001b6:	2034      	movs	r0, #52	@ 0x34
 80001b8:	f000 f964 	bl	8000484 <WriteData>
	WriteData(0x02U);
 80001bc:	2002      	movs	r0, #2
 80001be:	f000 f961 	bl	8000484 <WriteData>
	WriteCommand(0xCFU);
 80001c2:	20cf      	movs	r0, #207	@ 0xcf
 80001c4:	f000 f946 	bl	8000454 <WriteCommand>
	WriteData(0x00U);
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 f95b 	bl	8000484 <WriteData>
	WriteData(0xC1U);
 80001ce:	20c1      	movs	r0, #193	@ 0xc1
 80001d0:	f000 f958 	bl	8000484 <WriteData>
	WriteData(0x30U);
 80001d4:	2030      	movs	r0, #48	@ 0x30
 80001d6:	f000 f955 	bl	8000484 <WriteData>
	WriteCommand(0xE8U);
 80001da:	20e8      	movs	r0, #232	@ 0xe8
 80001dc:	f000 f93a 	bl	8000454 <WriteCommand>
	WriteData(0x85U);
 80001e0:	2085      	movs	r0, #133	@ 0x85
 80001e2:	f000 f94f 	bl	8000484 <WriteData>
	WriteData(0x00U);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 f94c 	bl	8000484 <WriteData>
	WriteData(0x78U);
 80001ec:	2078      	movs	r0, #120	@ 0x78
 80001ee:	f000 f949 	bl	8000484 <WriteData>
	WriteCommand(0xEAU);
 80001f2:	20ea      	movs	r0, #234	@ 0xea
 80001f4:	f000 f92e 	bl	8000454 <WriteCommand>
	WriteData(0x00U);
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 f943 	bl	8000484 <WriteData>
	WriteData(0x00U);
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f940 	bl	8000484 <WriteData>
	WriteCommand(0xEDU);
 8000204:	20ed      	movs	r0, #237	@ 0xed
 8000206:	f000 f925 	bl	8000454 <WriteCommand>
	WriteData(0x64U);
 800020a:	2064      	movs	r0, #100	@ 0x64
 800020c:	f000 f93a 	bl	8000484 <WriteData>
	WriteData(0x03U);
 8000210:	2003      	movs	r0, #3
 8000212:	f000 f937 	bl	8000484 <WriteData>
	WriteData(0x12U);
 8000216:	2012      	movs	r0, #18
 8000218:	f000 f934 	bl	8000484 <WriteData>
	WriteData(0x81U);
 800021c:	2081      	movs	r0, #129	@ 0x81
 800021e:	f000 f931 	bl	8000484 <WriteData>
	WriteCommand(0xF7U);
 8000222:	20f7      	movs	r0, #247	@ 0xf7
 8000224:	f000 f916 	bl	8000454 <WriteCommand>
	WriteData(0x20U);
 8000228:	2020      	movs	r0, #32
 800022a:	f000 f92b 	bl	8000484 <WriteData>
	WriteCommand(0xC0U);
 800022e:	20c0      	movs	r0, #192	@ 0xc0
 8000230:	f000 f910 	bl	8000454 <WriteCommand>
	WriteData(0x23U);
 8000234:	2023      	movs	r0, #35	@ 0x23
 8000236:	f000 f925 	bl	8000484 <WriteData>
	WriteCommand(0xC1U);
 800023a:	20c1      	movs	r0, #193	@ 0xc1
 800023c:	f000 f90a 	bl	8000454 <WriteCommand>
	WriteData(0x10U);
 8000240:	2010      	movs	r0, #16
 8000242:	f000 f91f 	bl	8000484 <WriteData>
	WriteCommand(0xC5U);
 8000246:	20c5      	movs	r0, #197	@ 0xc5
 8000248:	f000 f904 	bl	8000454 <WriteCommand>
	WriteData(0x3EU);
 800024c:	203e      	movs	r0, #62	@ 0x3e
 800024e:	f000 f919 	bl	8000484 <WriteData>
	WriteData(0x28U);
 8000252:	2028      	movs	r0, #40	@ 0x28
 8000254:	f000 f916 	bl	8000484 <WriteData>
	WriteCommand(0xC7U);
 8000258:	20c7      	movs	r0, #199	@ 0xc7
 800025a:	f000 f8fb 	bl	8000454 <WriteCommand>
	WriteData(0x86U);
 800025e:	2086      	movs	r0, #134	@ 0x86
 8000260:	f000 f910 	bl	8000484 <WriteData>
	WriteCommand(0x36U);
 8000264:	2036      	movs	r0, #54	@ 0x36
 8000266:	f000 f8f5 	bl	8000454 <WriteCommand>
	WriteData(0x48U);
 800026a:	2048      	movs	r0, #72	@ 0x48
 800026c:	f000 f90a 	bl	8000484 <WriteData>
	WriteCommand(0x3AU);
 8000270:	203a      	movs	r0, #58	@ 0x3a
 8000272:	f000 f8ef 	bl	8000454 <WriteCommand>
	WriteData(0x55U);
 8000276:	2055      	movs	r0, #85	@ 0x55
 8000278:	f000 f904 	bl	8000484 <WriteData>
	WriteCommand(0xB1U);
 800027c:	20b1      	movs	r0, #177	@ 0xb1
 800027e:	f000 f8e9 	bl	8000454 <WriteCommand>
	WriteData(0x00U);
 8000282:	2000      	movs	r0, #0
 8000284:	f000 f8fe 	bl	8000484 <WriteData>
	WriteData(0x18U);
 8000288:	2018      	movs	r0, #24
 800028a:	f000 f8fb 	bl	8000484 <WriteData>
	WriteCommand(0xB6U);
 800028e:	20b6      	movs	r0, #182	@ 0xb6
 8000290:	f000 f8e0 	bl	8000454 <WriteCommand>
	WriteData(0x08U);
 8000294:	2008      	movs	r0, #8
 8000296:	f000 f8f5 	bl	8000484 <WriteData>
	WriteData(0x82U);
 800029a:	2082      	movs	r0, #130	@ 0x82
 800029c:	f000 f8f2 	bl	8000484 <WriteData>
	WriteData(0x27U);
 80002a0:	2027      	movs	r0, #39	@ 0x27
 80002a2:	f000 f8ef 	bl	8000484 <WriteData>
	WriteCommand(0xF2U);
 80002a6:	20f2      	movs	r0, #242	@ 0xf2
 80002a8:	f000 f8d4 	bl	8000454 <WriteCommand>
	WriteData(0x00U);
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 f8e9 	bl	8000484 <WriteData>
	WriteCommand(0x26U);
 80002b2:	2026      	movs	r0, #38	@ 0x26
 80002b4:	f000 f8ce 	bl	8000454 <WriteCommand>
	WriteData(0x01U);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 f8e3 	bl	8000484 <WriteData>
	WriteCommand(0xE0U);
 80002be:	20e0      	movs	r0, #224	@ 0xe0
 80002c0:	f000 f8c8 	bl	8000454 <WriteCommand>
	WriteData(0x0FU);
 80002c4:	200f      	movs	r0, #15
 80002c6:	f000 f8dd 	bl	8000484 <WriteData>
	WriteData(0x31U);
 80002ca:	2031      	movs	r0, #49	@ 0x31
 80002cc:	f000 f8da 	bl	8000484 <WriteData>
	WriteData(0x2BU);
 80002d0:	202b      	movs	r0, #43	@ 0x2b
 80002d2:	f000 f8d7 	bl	8000484 <WriteData>
	WriteData(0x0CU);
 80002d6:	200c      	movs	r0, #12
 80002d8:	f000 f8d4 	bl	8000484 <WriteData>
	WriteData(0x0EU);
 80002dc:	200e      	movs	r0, #14
 80002de:	f000 f8d1 	bl	8000484 <WriteData>
	WriteData(0x08U);
 80002e2:	2008      	movs	r0, #8
 80002e4:	f000 f8ce 	bl	8000484 <WriteData>
	WriteData(0x4EU);
 80002e8:	204e      	movs	r0, #78	@ 0x4e
 80002ea:	f000 f8cb 	bl	8000484 <WriteData>
	WriteData(0xF1U);
 80002ee:	20f1      	movs	r0, #241	@ 0xf1
 80002f0:	f000 f8c8 	bl	8000484 <WriteData>
	WriteData(0x37U);
 80002f4:	2037      	movs	r0, #55	@ 0x37
 80002f6:	f000 f8c5 	bl	8000484 <WriteData>
	WriteData(0x07U);
 80002fa:	2007      	movs	r0, #7
 80002fc:	f000 f8c2 	bl	8000484 <WriteData>
	WriteData(0x10U);
 8000300:	2010      	movs	r0, #16
 8000302:	f000 f8bf 	bl	8000484 <WriteData>
	WriteData(0x03U);
 8000306:	2003      	movs	r0, #3
 8000308:	f000 f8bc 	bl	8000484 <WriteData>
	WriteData(0x0EU);
 800030c:	200e      	movs	r0, #14
 800030e:	f000 f8b9 	bl	8000484 <WriteData>
	WriteData(0x09U);
 8000312:	2009      	movs	r0, #9
 8000314:	f000 f8b6 	bl	8000484 <WriteData>
	WriteData(0x00U);
 8000318:	2000      	movs	r0, #0
 800031a:	f000 f8b3 	bl	8000484 <WriteData>
	WriteCommand(0xE1U);
 800031e:	20e1      	movs	r0, #225	@ 0xe1
 8000320:	f000 f898 	bl	8000454 <WriteCommand>
	WriteData(0x00U);
 8000324:	2000      	movs	r0, #0
 8000326:	f000 f8ad 	bl	8000484 <WriteData>
	WriteData(0x0EU);
 800032a:	200e      	movs	r0, #14
 800032c:	f000 f8aa 	bl	8000484 <WriteData>
	WriteData(0x14U);
 8000330:	2014      	movs	r0, #20
 8000332:	f000 f8a7 	bl	8000484 <WriteData>
	WriteData(0x03U);
 8000336:	2003      	movs	r0, #3
 8000338:	f000 f8a4 	bl	8000484 <WriteData>
	WriteData(0x11U);
 800033c:	2011      	movs	r0, #17
 800033e:	f000 f8a1 	bl	8000484 <WriteData>
	WriteData(0x07U);
 8000342:	2007      	movs	r0, #7
 8000344:	f000 f89e 	bl	8000484 <WriteData>
	WriteData(0x31U);
 8000348:	2031      	movs	r0, #49	@ 0x31
 800034a:	f000 f89b 	bl	8000484 <WriteData>
	WriteData(0xC1U);
 800034e:	20c1      	movs	r0, #193	@ 0xc1
 8000350:	f000 f898 	bl	8000484 <WriteData>
	WriteData(0x48U);
 8000354:	2048      	movs	r0, #72	@ 0x48
 8000356:	f000 f895 	bl	8000484 <WriteData>
	WriteData(0x08U);
 800035a:	2008      	movs	r0, #8
 800035c:	f000 f892 	bl	8000484 <WriteData>
	WriteData(0x0FU);
 8000360:	200f      	movs	r0, #15
 8000362:	f000 f88f 	bl	8000484 <WriteData>
	WriteData(0x0CU);
 8000366:	200c      	movs	r0, #12
 8000368:	f000 f88c 	bl	8000484 <WriteData>
	WriteData(0x31U);
 800036c:	2031      	movs	r0, #49	@ 0x31
 800036e:	f000 f889 	bl	8000484 <WriteData>
	WriteData(0x36U);
 8000372:	2036      	movs	r0, #54	@ 0x36
 8000374:	f000 f886 	bl	8000484 <WriteData>
	WriteData(0x0FU);
 8000378:	200f      	movs	r0, #15
 800037a:	f000 f883 	bl	8000484 <WriteData>
	WriteCommand(0x11U);
 800037e:	2011      	movs	r0, #17
 8000380:	f000 f868 	bl	8000454 <WriteCommand>
	DELAY_Tim_Ms(&htim1, 120UL);
 8000384:	2178      	movs	r1, #120	@ 0x78
 8000386:	4808      	ldr	r0, [pc, #32]	@ (80003a8 <ILI9341Init+0x228>)
 8000388:	f000 f903 	bl	8000592 <DELAY_Tim_Ms>
	WriteCommand(0x29U);
 800038c:	2029      	movs	r0, #41	@ 0x29
 800038e:	f000 f861 	bl	8000454 <WriteCommand>
	WriteCommand(0x36U);
 8000392:	2036      	movs	r0, #54	@ 0x36
 8000394:	f000 f85e 	bl	8000454 <WriteCommand>
	WriteData(0x48U);
 8000398:	2048      	movs	r0, #72	@ 0x48
 800039a:	f000 f873 	bl	8000484 <WriteData>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010800 	.word	0x40010800
 80003a8:	200000c4 	.word	0x200000c4

080003ac <ILI9341DrawColourBitmap>:
 * pixels in the image.
 * @param imageData The `imageData` parameter is a pointer to an array of uint8_t data representing the
 * pixel colors of the bitmap image. Each pair of consecutive uint8_t values in the array represents a
 * single pixel color in RGB565 format (16-bit color). The first uint8_t represents the lower
 */
void ILI9341DrawColourBitmap(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint8_t *imageData) {
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4604      	mov	r4, r0
 80003b4:	4608      	mov	r0, r1
 80003b6:	4611      	mov	r1, r2
 80003b8:	461a      	mov	r2, r3
 80003ba:	4623      	mov	r3, r4
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	4603      	mov	r3, r0
 80003c0:	80bb      	strh	r3, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	807b      	strh	r3, [r7, #2]
 80003c6:	4613      	mov	r3, r2
 80003c8:	803b      	strh	r3, [r7, #0]

    SetWindow(x, y, x + width - 1U, y + height - 1U);
 80003ca:	88fa      	ldrh	r2, [r7, #6]
 80003cc:	887b      	ldrh	r3, [r7, #2]
 80003ce:	4413      	add	r3, r2
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	3b01      	subs	r3, #1
 80003d4:	b29c      	uxth	r4, r3
 80003d6:	88ba      	ldrh	r2, [r7, #4]
 80003d8:	883b      	ldrh	r3, [r7, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	b29b      	uxth	r3, r3
 80003de:	3b01      	subs	r3, #1
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	88b9      	ldrh	r1, [r7, #4]
 80003e4:	88f8      	ldrh	r0, [r7, #6]
 80003e6:	4622      	mov	r2, r4
 80003e8:	f000 f864 	bl	80004b4 <SetWindow>

    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2102      	movs	r1, #2
 80003f0:	4816      	ldr	r0, [pc, #88]	@ (800044c <ILI9341DrawColourBitmap+0xa0>)
 80003f2:	f001 f853 	bl	800149c <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < width * height * 2; i += 2) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e019      	b.n	8000430 <ILI9341DrawColourBitmap+0x84>
        uint16_t color = (imageData[i + 1] << 8) | imageData[i];
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	6a3a      	ldr	r2, [r7, #32]
 8000402:	4413      	add	r3, r2
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	021b      	lsls	r3, r3, #8
 8000408:	b21a      	sxth	r2, r3
 800040a:	6a39      	ldr	r1, [r7, #32]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	440b      	add	r3, r1
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b21b      	sxth	r3, r3
 8000414:	4313      	orrs	r3, r2
 8000416:	b21b      	sxth	r3, r3
 8000418:	b29b      	uxth	r3, r3
 800041a:	817b      	strh	r3, [r7, #10]

        HAL_SPI_Transmit(&hspi1, (uint8_t*)&color, sizeof(color), 200U);
 800041c:	f107 010a 	add.w	r1, r7, #10
 8000420:	23c8      	movs	r3, #200	@ 0xc8
 8000422:	2202      	movs	r2, #2
 8000424:	480a      	ldr	r0, [pc, #40]	@ (8000450 <ILI9341DrawColourBitmap+0xa4>)
 8000426:	f001 fcb3 	bl	8001d90 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < width * height * 2; i += 2) {
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3302      	adds	r3, #2
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	887b      	ldrh	r3, [r7, #2]
 8000432:	883a      	ldrh	r2, [r7, #0]
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	461a      	mov	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	4293      	cmp	r3, r2
 8000440:	d3dc      	bcc.n	80003fc <ILI9341DrawColourBitmap+0x50>
    }
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	bd90      	pop	{r4, r7, pc}
 800044c:	40010800 	.word	0x40010800
 8000450:	20000028 	.word	0x20000028

08000454 <WriteCommand>:
 *
 * @param command The `command` parameter is a uint8_t type variable, which is an unsigned 8-bit
 * integer used to specify a command to be sent to a display controller.
 */
static void WriteCommand(uint8_t command)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2102      	movs	r1, #2
 8000462:	4806      	ldr	r0, [pc, #24]	@ (800047c <WriteCommand+0x28>)
 8000464:	f001 f81a 	bl	800149c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &command, 1U, 100U);
 8000468:	1df9      	adds	r1, r7, #7
 800046a:	2364      	movs	r3, #100	@ 0x64
 800046c:	2201      	movs	r2, #1
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <WriteCommand+0x2c>)
 8000470:	f001 fc8e 	bl	8001d90 <HAL_SPI_Transmit>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40010800 	.word	0x40010800
 8000480:	20000028 	.word	0x20000028

08000484 <WriteData>:
 *
 * @param data The `data` parameter is of type `uint8_t`, which means it is an unsigned 8-bit integer
 * representing a single byte of data to be transmitted.
 */
static void WriteData(uint8_t data)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2102      	movs	r1, #2
 8000492:	4806      	ldr	r0, [pc, #24]	@ (80004ac <WriteData+0x28>)
 8000494:	f001 f802 	bl	800149c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1U, 200U);
 8000498:	1df9      	adds	r1, r7, #7
 800049a:	23c8      	movs	r3, #200	@ 0xc8
 800049c:	2201      	movs	r2, #1
 800049e:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <WriteData+0x2c>)
 80004a0:	f001 fc76 	bl	8001d90 <HAL_SPI_Transmit>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40010800 	.word	0x40010800
 80004b0:	20000028 	.word	0x20000028

080004b4 <SetWindow>:
 * set on the display.
 * @param yEnd The `yEnd` parameter represents the ending y-coordinate of the window that is being set
 * on the display.
 */
static void SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4604      	mov	r4, r0
 80004bc:	4608      	mov	r0, r1
 80004be:	4611      	mov	r1, r2
 80004c0:	461a      	mov	r2, r3
 80004c2:	4623      	mov	r3, r4
 80004c4:	80fb      	strh	r3, [r7, #6]
 80004c6:	4603      	mov	r3, r0
 80004c8:	80bb      	strh	r3, [r7, #4]
 80004ca:	460b      	mov	r3, r1
 80004cc:	807b      	strh	r3, [r7, #2]
 80004ce:	4613      	mov	r3, r2
 80004d0:	803b      	strh	r3, [r7, #0]
	WriteCommand(0x2AU);
 80004d2:	202a      	movs	r0, #42	@ 0x2a
 80004d4:	f7ff ffbe 	bl	8000454 <WriteCommand>
	WriteData(xStart >> 8);
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	b29b      	uxth	r3, r3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ffcf 	bl	8000484 <WriteData>
	WriteData(xStart);
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ffca 	bl	8000484 <WriteData>
	WriteData(xEnd >> 8);
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	0a1b      	lsrs	r3, r3, #8
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffc3 	bl	8000484 <WriteData>
	WriteData(xEnd);
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ffbe 	bl	8000484 <WriteData>

	WriteCommand(0x2BU);
 8000508:	202b      	movs	r0, #43	@ 0x2b
 800050a:	f7ff ffa3 	bl	8000454 <WriteCommand>
	WriteData(yStart >> 8);
 800050e:	88bb      	ldrh	r3, [r7, #4]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ffb4 	bl	8000484 <WriteData>
	WriteData(yStart);
 800051c:	88bb      	ldrh	r3, [r7, #4]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ffaf 	bl	8000484 <WriteData>
	WriteData(yEnd >> 8);
 8000526:	883b      	ldrh	r3, [r7, #0]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	b29b      	uxth	r3, r3
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ffa8 	bl	8000484 <WriteData>
	WriteData(yEnd);
 8000534:	883b      	ldrh	r3, [r7, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffa3 	bl	8000484 <WriteData>

	WriteCommand(0x2CU);
 800053e:	202c      	movs	r0, #44	@ 0x2c
 8000540:	f7ff ff88 	bl	8000454 <WriteCommand>

	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2102      	movs	r1, #2
 8000548:	4803      	ldr	r0, [pc, #12]	@ (8000558 <SetWindow+0xa4>)
 800054a:	f000 ffa7 	bl	800149c <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bd90      	pop	{r4, r7, pc}
 8000556:	bf00      	nop
 8000558:	40010800 	.word	0x40010800

0800055c <DELAY_Tim_Us>:
 *
 * @param htim pointer to the timer handle
 * @param time_us the time in microseconds that you want to delay
 */
void DELAY_Tim_Us(TIM_HandleTypeDef *htim, uint16_t time_us)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	807b      	strh	r3, [r7, #2]
    HAL_TIM_Base_Start(htim);
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f001 ff47 	bl	80023fc <HAL_TIM_Base_Start>
    htim->Instance->CNT = 0;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	@ 0x24
    while ((htim->Instance->CNT) < time_us)
 8000576:	bf00      	nop
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	429a      	cmp	r2, r3
 8000582:	d3f9      	bcc.n	8000578 <DELAY_Tim_Us+0x1c>
        ;
    HAL_TIM_Base_Stop(htim);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f001 ff83 	bl	8002490 <HAL_TIM_Base_Stop>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <DELAY_Tim_Ms>:
 *
 * @param htim pointer to the timer handle
 * @param time_ms The time in milliseconds to delay.
 */
void DELAY_Tim_Ms(TIM_HandleTypeDef *htim, uint16_t time_ms)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	807b      	strh	r3, [r7, #2]
    while (time_ms--)
 800059e:	e004      	b.n	80005aa <DELAY_Tim_Ms+0x18>
    {
        DELAY_Tim_Us(htim, 1000);
 80005a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffd9 	bl	800055c <DELAY_Tim_Us>
    while (time_ms--)
 80005aa:	887b      	ldrh	r3, [r7, #2]
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	807a      	strh	r2, [r7, #2]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f5      	bne.n	80005a0 <DELAY_Tim_Ms+0xe>
    }
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fa79 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f81d 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f905 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 f8e5 	bl	80007a0 <MX_DMA_Init>
  MX_SPI1_Init();
 80005d6:	f000 f85d 	bl	8000694 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005da:	f000 f891 	bl	8000700 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  ILI9341_Init();
//  ILI9341_Set_Rotation(3);
//  Display_Color_Picture();
  ILI9341Reset();
 80005de:	f7ff fdb5 	bl	800014c <ILI9341Reset>
  ILI9341Init();
 80005e2:	f7ff fdcd 	bl	8000180 <ILI9341Init>
  ILI9341DrawColourBitmap(0,0,100,100,ironman);
 80005e6:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <main+0x44>)
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2364      	movs	r3, #100	@ 0x64
 80005ec:	2264      	movs	r2, #100	@ 0x64
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff fedb 	bl	80003ac <ILI9341DrawColourBitmap>
  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fa:	f000 fac1 	bl	8000b80 <HAL_Delay>
	  //HAL_Delay(1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x3e>
 8000602:	bf00      	nop
 8000604:	08002988 	.word	0x08002988

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b090      	sub	sp, #64	@ 0x40
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	2228      	movs	r2, #40	@ 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f97e 	bl	8002918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000646:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f000 ff3b 	bl	80014cc <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800065c:	f000 f8fc 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2102      	movs	r1, #2
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f9a8 	bl	80019d0 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000686:	f000 f8e7 	bl	8000858 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	@ 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	@ (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2208      	movs	r2, #8
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f001 facf 	bl	8001c88 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f8b2 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000028 	.word	0x20000028
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_TIM1_Init+0x98>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <MX_TIM1_Init+0x9c>)
 8000720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000724:	2247      	movs	r2, #71	@ 0x47
 8000726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_TIM1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_TIM1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000748:	4813      	ldr	r0, [pc, #76]	@ (8000798 <MX_TIM1_Init+0x98>)
 800074a:	f001 fe07 	bl	800235c <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f880 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000766:	f001 feb9 	bl	80024dc <HAL_TIM_ConfigClockSource>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000770:	f000 f872 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_TIM1_Init+0x98>)
 8000782:	f002 f86b 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800078c:	f000 f864 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000c4 	.word	0x200000c4
 800079c:	40012c00 	.word	0x40012c00

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a0b      	ldr	r2, [pc, #44]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200d      	movs	r0, #13
 80007c4:	f000 fad7 	bl	8000d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007c8:	200d      	movs	r0, #13
 80007ca:	f000 faf0 	bl	8000dae <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <MX_GPIO_Init+0x74>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a16      	ldr	r2, [pc, #88]	@ (8000850 <MX_GPIO_Init+0x74>)
 80007f6:	f043 0320 	orr.w	r3, r3, #32
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_GPIO_Init+0x74>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0320 	and.w	r3, r3, #32
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_GPIO_Init+0x74>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <MX_GPIO_Init+0x74>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_GPIO_Init+0x74>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2107      	movs	r1, #7
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <MX_GPIO_Init+0x78>)
 8000826:	f000 fe39 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800082a:	2307      	movs	r3, #7
 800082c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0x78>)
 8000842:	f000 fca7 	bl	8001194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_MspInit+0x5c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <HAL_MspInit+0x5c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_MspInit+0x5c>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x5c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <HAL_MspInit+0x5c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x5c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_MspInit+0x60>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <HAL_MspInit+0x60>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010000 	.word	0x40010000

080008c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000994 <HAL_SPI_MspInit+0xcc>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d151      	bne.n	800098c <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <HAL_SPI_MspInit+0xd0>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000998 <HAL_SPI_MspInit+0xd0>)
 80008ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <HAL_SPI_MspInit+0xd0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <HAL_SPI_MspInit+0xd0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a24      	ldr	r2, [pc, #144]	@ (8000998 <HAL_SPI_MspInit+0xd0>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <HAL_SPI_MspInit+0xd0>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000918:	23a0      	movs	r3, #160	@ 0xa0
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	481c      	ldr	r0, [pc, #112]	@ (800099c <HAL_SPI_MspInit+0xd4>)
 800092c:	f000 fc32 	bl	8001194 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <HAL_SPI_MspInit+0xdc>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000938:	2210      	movs	r2, #16
 800093a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000944:	2280      	movs	r2, #128	@ 0x80
 8000946:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000960:	480f      	ldr	r0, [pc, #60]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000962:	f000 fa3f 	bl	8000de4 <HAL_DMA_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 800096c:	f7ff ff74 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000974:	649a      	str	r2, [r3, #72]	@ 0x48
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_SPI_MspInit+0xd8>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2023      	movs	r0, #35	@ 0x23
 8000982:	f000 f9f8 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000986:	2023      	movs	r0, #35	@ 0x23
 8000988:	f000 fa11 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40013000 	.word	0x40013000
 8000998:	40021000 	.word	0x40021000
 800099c:	40010800 	.word	0x40010800
 80009a0:	20000080 	.word	0x20000080
 80009a4:	40020030 	.word	0x40020030

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a09      	ldr	r2, [pc, #36]	@ (80009dc <HAL_TIM_Base_MspInit+0x34>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d10b      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009c4:	6193      	str	r3, [r2, #24]
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	40012c00 	.word	0x40012c00
 80009e0:	40021000 	.word	0x40021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f888 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <DMA1_Channel3_IRQHandler+0x10>)
 8000a42:	f000 faa1 	bl	8000f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000080 	.word	0x20000080

08000a50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <SPI1_IRQHandler+0x10>)
 8000a56:	f001 fadf 	bl	8002018 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000028 	.word	0x20000028

08000a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff fff8 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a76:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a78:	4a0c      	ldr	r2, [pc, #48]	@ (8000aac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a09      	ldr	r2, [pc, #36]	@ (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a8c:	4c09      	ldr	r4, [pc, #36]	@ (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f001 ff45 	bl	8002928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9e:	f7ff fd8f 	bl	80005c0 <main>
  bx lr
 8000aa2:	4770      	bx	lr
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aac:	080077d4 	.word	0x080077d4
  ldr r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab4:	20000110 	.word	0x20000110

08000ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_Init+0x28>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_Init+0x28>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f947 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fec4 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f95f 	bl	8000dca <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f927 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a03      	ldr	r2, [pc, #12]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000008 	.word	0x20000008
 8000b68:	2000010c 	.word	0x2000010c

08000b6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	@ (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	2000010c 	.word	0x2000010c

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff fff0 	bl	8000b6c <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffe0 	bl	8000b6c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	@ (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4906      	ldr	r1, [pc, #24]	@ (8000c60 <__NVIC_EnableIRQ+0x34>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	@ (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	@ 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff90 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff2d 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff42 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff90 	bl	8000cb8 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5f 	bl	8000c64 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff35 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa2 	bl	8000d1c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e043      	b.n	8000e82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <HAL_DMA_Init+0xa8>)
 8000e02:	4413      	add	r3, r2
 8000e04:	4a22      	ldr	r2, [pc, #136]	@ (8000e90 <HAL_DMA_Init+0xac>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	009a      	lsls	r2, r3, #2
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a1f      	ldr	r2, [pc, #124]	@ (8000e94 <HAL_DMA_Init+0xb0>)
 8000e16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000e2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	bffdfff8 	.word	0xbffdfff8
 8000e90:	cccccccd 	.word	0xcccccccd
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d005      	beq.n	8000ebc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e051      	b.n	8000f60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 020e 	bic.w	r2, r2, #14
 8000eca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a22      	ldr	r2, [pc, #136]	@ (8000f6c <HAL_DMA_Abort_IT+0xd4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d029      	beq.n	8000f3a <HAL_DMA_Abort_IT+0xa2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <HAL_DMA_Abort_IT+0xd8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d022      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x9e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f74 <HAL_DMA_Abort_IT+0xdc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01a      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x98>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f78 <HAL_DMA_Abort_IT+0xe0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d012      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x92>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <HAL_DMA_Abort_IT+0xe4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00a      	beq.n	8000f24 <HAL_DMA_Abort_IT+0x8c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <HAL_DMA_Abort_IT+0xe8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d102      	bne.n	8000f1e <HAL_DMA_Abort_IT+0x86>
 8000f18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f1c:	e00e      	b.n	8000f3c <HAL_DMA_Abort_IT+0xa4>
 8000f1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f22:	e00b      	b.n	8000f3c <HAL_DMA_Abort_IT+0xa4>
 8000f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f28:	e008      	b.n	8000f3c <HAL_DMA_Abort_IT+0xa4>
 8000f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2e:	e005      	b.n	8000f3c <HAL_DMA_Abort_IT+0xa4>
 8000f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f34:	e002      	b.n	8000f3c <HAL_DMA_Abort_IT+0xa4>
 8000f36:	2310      	movs	r3, #16
 8000f38:	e000      	b.n	8000f3c <HAL_DMA_Abort_IT+0xa4>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	4a11      	ldr	r2, [pc, #68]	@ (8000f84 <HAL_DMA_Abort_IT+0xec>)
 8000f3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	4798      	blx	r3
    } 
  }
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40020008 	.word	0x40020008
 8000f70:	4002001c 	.word	0x4002001c
 8000f74:	40020030 	.word	0x40020030
 8000f78:	40020044 	.word	0x40020044
 8000f7c:	40020058 	.word	0x40020058
 8000f80:	4002006c 	.word	0x4002006c
 8000f84:	40020000 	.word	0x40020000

08000f88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d04f      	beq.n	8001050 <HAL_DMA_IRQHandler+0xc8>
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d04a      	beq.n	8001050 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d107      	bne.n	8000fd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0204 	bic.w	r2, r2, #4
 8000fd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a66      	ldr	r2, [pc, #408]	@ (8001178 <HAL_DMA_IRQHandler+0x1f0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d029      	beq.n	8001036 <HAL_DMA_IRQHandler+0xae>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a65      	ldr	r2, [pc, #404]	@ (800117c <HAL_DMA_IRQHandler+0x1f4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d022      	beq.n	8001032 <HAL_DMA_IRQHandler+0xaa>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a63      	ldr	r2, [pc, #396]	@ (8001180 <HAL_DMA_IRQHandler+0x1f8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01a      	beq.n	800102c <HAL_DMA_IRQHandler+0xa4>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a62      	ldr	r2, [pc, #392]	@ (8001184 <HAL_DMA_IRQHandler+0x1fc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d012      	beq.n	8001026 <HAL_DMA_IRQHandler+0x9e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a60      	ldr	r2, [pc, #384]	@ (8001188 <HAL_DMA_IRQHandler+0x200>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00a      	beq.n	8001020 <HAL_DMA_IRQHandler+0x98>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a5f      	ldr	r2, [pc, #380]	@ (800118c <HAL_DMA_IRQHandler+0x204>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d102      	bne.n	800101a <HAL_DMA_IRQHandler+0x92>
 8001014:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001018:	e00e      	b.n	8001038 <HAL_DMA_IRQHandler+0xb0>
 800101a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800101e:	e00b      	b.n	8001038 <HAL_DMA_IRQHandler+0xb0>
 8001020:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001024:	e008      	b.n	8001038 <HAL_DMA_IRQHandler+0xb0>
 8001026:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800102a:	e005      	b.n	8001038 <HAL_DMA_IRQHandler+0xb0>
 800102c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001030:	e002      	b.n	8001038 <HAL_DMA_IRQHandler+0xb0>
 8001032:	2340      	movs	r3, #64	@ 0x40
 8001034:	e000      	b.n	8001038 <HAL_DMA_IRQHandler+0xb0>
 8001036:	2304      	movs	r3, #4
 8001038:	4a55      	ldr	r2, [pc, #340]	@ (8001190 <HAL_DMA_IRQHandler+0x208>)
 800103a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 8094 	beq.w	800116e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800104e:	e08e      	b.n	800116e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	2202      	movs	r2, #2
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d056      	beq.n	800110e <HAL_DMA_IRQHandler+0x186>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10b      	bne.n	8001090 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020a 	bic.w	r2, r2, #10
 8001086:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a38      	ldr	r2, [pc, #224]	@ (8001178 <HAL_DMA_IRQHandler+0x1f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d029      	beq.n	80010ee <HAL_DMA_IRQHandler+0x166>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a37      	ldr	r2, [pc, #220]	@ (800117c <HAL_DMA_IRQHandler+0x1f4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d022      	beq.n	80010ea <HAL_DMA_IRQHandler+0x162>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_DMA_IRQHandler+0x1f8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01a      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x15c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a34      	ldr	r2, [pc, #208]	@ (8001184 <HAL_DMA_IRQHandler+0x1fc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d012      	beq.n	80010de <HAL_DMA_IRQHandler+0x156>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a32      	ldr	r2, [pc, #200]	@ (8001188 <HAL_DMA_IRQHandler+0x200>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x150>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a31      	ldr	r2, [pc, #196]	@ (800118c <HAL_DMA_IRQHandler+0x204>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d102      	bne.n	80010d2 <HAL_DMA_IRQHandler+0x14a>
 80010cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010d0:	e00e      	b.n	80010f0 <HAL_DMA_IRQHandler+0x168>
 80010d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010d6:	e00b      	b.n	80010f0 <HAL_DMA_IRQHandler+0x168>
 80010d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010dc:	e008      	b.n	80010f0 <HAL_DMA_IRQHandler+0x168>
 80010de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e2:	e005      	b.n	80010f0 <HAL_DMA_IRQHandler+0x168>
 80010e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e8:	e002      	b.n	80010f0 <HAL_DMA_IRQHandler+0x168>
 80010ea:	2320      	movs	r3, #32
 80010ec:	e000      	b.n	80010f0 <HAL_DMA_IRQHandler+0x168>
 80010ee:	2302      	movs	r3, #2
 80010f0:	4a27      	ldr	r2, [pc, #156]	@ (8001190 <HAL_DMA_IRQHandler+0x208>)
 80010f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001100:	2b00      	cmp	r3, #0
 8001102:	d034      	beq.n	800116e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800110c:	e02f      	b.n	800116e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	2208      	movs	r2, #8
 8001114:	409a      	lsls	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d028      	beq.n	8001170 <HAL_DMA_IRQHandler+0x1e8>
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d023      	beq.n	8001170 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 020e 	bic.w	r2, r2, #14
 8001136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001140:	2101      	movs	r1, #1
 8001142:	fa01 f202 	lsl.w	r2, r1, r2
 8001146:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
    }
  }
  return;
 800116e:	bf00      	nop
 8001170:	bf00      	nop
}
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020008 	.word	0x40020008
 800117c:	4002001c 	.word	0x4002001c
 8001180:	40020030 	.word	0x40020030
 8001184:	40020044 	.word	0x40020044
 8001188:	40020058 	.word	0x40020058
 800118c:	4002006c 	.word	0x4002006c
 8001190:	40020000 	.word	0x40020000

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b08b      	sub	sp, #44	@ 0x2c
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	e169      	b.n	800147c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a8:	2201      	movs	r2, #1
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8158 	bne.w	8001476 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001434 <HAL_GPIO_Init+0x2a0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d05e      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011d0:	4a98      	ldr	r2, [pc, #608]	@ (8001434 <HAL_GPIO_Init+0x2a0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d875      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011d6:	4a98      	ldr	r2, [pc, #608]	@ (8001438 <HAL_GPIO_Init+0x2a4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d058      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011dc:	4a96      	ldr	r2, [pc, #600]	@ (8001438 <HAL_GPIO_Init+0x2a4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d86f      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011e2:	4a96      	ldr	r2, [pc, #600]	@ (800143c <HAL_GPIO_Init+0x2a8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d052      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011e8:	4a94      	ldr	r2, [pc, #592]	@ (800143c <HAL_GPIO_Init+0x2a8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d869      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011ee:	4a94      	ldr	r2, [pc, #592]	@ (8001440 <HAL_GPIO_Init+0x2ac>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d04c      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011f4:	4a92      	ldr	r2, [pc, #584]	@ (8001440 <HAL_GPIO_Init+0x2ac>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d863      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011fa:	4a92      	ldr	r2, [pc, #584]	@ (8001444 <HAL_GPIO_Init+0x2b0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d046      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 8001200:	4a90      	ldr	r2, [pc, #576]	@ (8001444 <HAL_GPIO_Init+0x2b0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d85d      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 8001206:	2b12      	cmp	r3, #18
 8001208:	d82a      	bhi.n	8001260 <HAL_GPIO_Init+0xcc>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d859      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 800120e:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <HAL_GPIO_Init+0x80>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	0800128f 	.word	0x0800128f
 8001218:	08001269 	.word	0x08001269
 800121c:	0800127b 	.word	0x0800127b
 8001220:	080012bd 	.word	0x080012bd
 8001224:	080012c3 	.word	0x080012c3
 8001228:	080012c3 	.word	0x080012c3
 800122c:	080012c3 	.word	0x080012c3
 8001230:	080012c3 	.word	0x080012c3
 8001234:	080012c3 	.word	0x080012c3
 8001238:	080012c3 	.word	0x080012c3
 800123c:	080012c3 	.word	0x080012c3
 8001240:	080012c3 	.word	0x080012c3
 8001244:	080012c3 	.word	0x080012c3
 8001248:	080012c3 	.word	0x080012c3
 800124c:	080012c3 	.word	0x080012c3
 8001250:	080012c3 	.word	0x080012c3
 8001254:	080012c3 	.word	0x080012c3
 8001258:	08001271 	.word	0x08001271
 800125c:	08001285 	.word	0x08001285
 8001260:	4a79      	ldr	r2, [pc, #484]	@ (8001448 <HAL_GPIO_Init+0x2b4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001266:	e02c      	b.n	80012c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e029      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	3304      	adds	r3, #4
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e024      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	3308      	adds	r3, #8
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e01f      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	330c      	adds	r3, #12
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e01a      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001296:	2304      	movs	r3, #4
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e013      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d105      	bne.n	80012b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a4:	2308      	movs	r3, #8
 80012a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	611a      	str	r2, [r3, #16]
          break;
 80012ae:	e009      	b.n	80012c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b0:	2308      	movs	r3, #8
 80012b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	615a      	str	r2, [r3, #20]
          break;
 80012ba:	e003      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e000      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          break;
 80012c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2bff      	cmp	r3, #255	@ 0xff
 80012c8:	d801      	bhi.n	80012ce <HAL_GPIO_Init+0x13a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	e001      	b.n	80012d2 <HAL_GPIO_Init+0x13e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3304      	adds	r3, #4
 80012d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2bff      	cmp	r3, #255	@ 0xff
 80012d8:	d802      	bhi.n	80012e0 <HAL_GPIO_Init+0x14c>
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x152>
 80012e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e2:	3b08      	subs	r3, #8
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	210f      	movs	r1, #15
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	6a39      	ldr	r1, [r7, #32]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 80b1 	beq.w	8001476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001314:	4b4d      	ldr	r3, [pc, #308]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a4c      	ldr	r2, [pc, #304]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800132c:	4a48      	ldr	r2, [pc, #288]	@ (8001450 <HAL_GPIO_Init+0x2bc>)
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a40      	ldr	r2, [pc, #256]	@ (8001454 <HAL_GPIO_Init+0x2c0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x1ec>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a3f      	ldr	r2, [pc, #252]	@ (8001458 <HAL_GPIO_Init+0x2c4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1e8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a3e      	ldr	r2, [pc, #248]	@ (800145c <HAL_GPIO_Init+0x2c8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1e4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a3d      	ldr	r2, [pc, #244]	@ (8001460 <HAL_GPIO_Init+0x2cc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1e0>
 8001370:	2303      	movs	r3, #3
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001374:	2304      	movs	r3, #4
 8001376:	e004      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001378:	2302      	movs	r3, #2
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001380:	2300      	movs	r3, #0
 8001382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001384:	f002 0203 	and.w	r2, r2, #3
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	4093      	lsls	r3, r2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001392:	492f      	ldr	r1, [pc, #188]	@ (8001450 <HAL_GPIO_Init+0x2bc>)
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	492c      	ldr	r1, [pc, #176]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	608b      	str	r3, [r1, #8]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4928      	ldr	r1, [pc, #160]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d4:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	4922      	ldr	r1, [pc, #136]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	60cb      	str	r3, [r1, #12]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	491e      	ldr	r1, [pc, #120]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4918      	ldr	r1, [pc, #96]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4914      	ldr	r1, [pc, #80]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d021      	beq.n	8001468 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	490e      	ldr	r1, [pc, #56]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e021      	b.n	8001476 <HAL_GPIO_Init+0x2e2>
 8001432:	bf00      	nop
 8001434:	10320000 	.word	0x10320000
 8001438:	10310000 	.word	0x10310000
 800143c:	10220000 	.word	0x10220000
 8001440:	10210000 	.word	0x10210000
 8001444:	10120000 	.word	0x10120000
 8001448:	10110000 	.word	0x10110000
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40011000 	.word	0x40011000
 8001460:	40011400 	.word	0x40011400
 8001464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <HAL_GPIO_Init+0x304>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	43db      	mvns	r3, r3
 8001470:	4909      	ldr	r1, [pc, #36]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001472:	4013      	ands	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	3301      	adds	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae8e 	bne.w	80011a8 <HAL_GPIO_Init+0x14>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	372c      	adds	r7, #44	@ 0x2c
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b8:	e003      	b.n	80014c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e272      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8087 	beq.w	80015fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ec:	4b92      	ldr	r3, [pc, #584]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d00c      	beq.n	8001512 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f8:	4b8f      	ldr	r3, [pc, #572]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b08      	cmp	r3, #8
 8001502:	d112      	bne.n	800152a <HAL_RCC_OscConfig+0x5e>
 8001504:	4b8c      	ldr	r3, [pc, #560]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001510:	d10b      	bne.n	800152a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001512:	4b89      	ldr	r3, [pc, #548]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d06c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x12c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d168      	bne.n	80015f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e24c      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x76>
 8001534:	4b80      	ldr	r3, [pc, #512]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a7f      	ldr	r2, [pc, #508]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800153a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	e02e      	b.n	80015a0 <HAL_RCC_OscConfig+0xd4>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b7b      	ldr	r3, [pc, #492]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7a      	ldr	r2, [pc, #488]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b78      	ldr	r3, [pc, #480]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a77      	ldr	r2, [pc, #476]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800155c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e01d      	b.n	80015a0 <HAL_RCC_OscConfig+0xd4>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0xbc>
 800156e:	4b72      	ldr	r3, [pc, #456]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a71      	ldr	r2, [pc, #452]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b6f      	ldr	r3, [pc, #444]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6e      	ldr	r2, [pc, #440]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0xd4>
 8001588:	4b6b      	ldr	r3, [pc, #428]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6a      	ldr	r2, [pc, #424]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800158e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a67      	ldr	r2, [pc, #412]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800159a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fae0 	bl	8000b6c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fadc 	bl	8000b6c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e200      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0xe4>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff facc 	bl	8000b6c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fac8 	bl	8000b6c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1ec      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x10c>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d063      	beq.n	80016ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001606:	4b4c      	ldr	r3, [pc, #304]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001612:	4b49      	ldr	r3, [pc, #292]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b08      	cmp	r3, #8
 800161c:	d11c      	bne.n	8001658 <HAL_RCC_OscConfig+0x18c>
 800161e:	4b46      	ldr	r3, [pc, #280]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d116      	bne.n	8001658 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	4b43      	ldr	r3, [pc, #268]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x176>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e1c0      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b3d      	ldr	r3, [pc, #244]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4939      	ldr	r1, [pc, #228]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	e03a      	b.n	80016ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001660:	4b36      	ldr	r3, [pc, #216]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fa81 	bl	8000b6c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff fa7d 	bl	8000b6c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1a1      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4927      	ldr	r1, [pc, #156]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e015      	b.n	80016ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <HAL_RCC_OscConfig+0x270>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa60 	bl	8000b6c <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fa5c 	bl	8000b6c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e180      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03a      	beq.n	8001750 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d019      	beq.n	8001716 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_RCC_OscConfig+0x274>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fa40 	bl	8000b6c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff fa3c 	bl	8000b6c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e160      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_RCC_OscConfig+0x26c>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f000 fa9c 	bl	8001c4c <RCC_Delay>
 8001714:	e01c      	b.n	8001750 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_RCC_OscConfig+0x274>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fa26 	bl	8000b6c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001722:	e00f      	b.n	8001744 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fa22 	bl	8000b6c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d908      	bls.n	8001744 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e146      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	42420000 	.word	0x42420000
 8001740:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	4b92      	ldr	r3, [pc, #584]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e9      	bne.n	8001724 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a6 	beq.w	80018aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b8b      	ldr	r3, [pc, #556]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10d      	bne.n	800178a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b88      	ldr	r3, [pc, #544]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a87      	ldr	r2, [pc, #540]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b85      	ldr	r3, [pc, #532]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	4b82      	ldr	r3, [pc, #520]	@ (8001994 <HAL_RCC_OscConfig+0x4c8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d118      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001796:	4b7f      	ldr	r3, [pc, #508]	@ (8001994 <HAL_RCC_OscConfig+0x4c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7e      	ldr	r2, [pc, #504]	@ (8001994 <HAL_RCC_OscConfig+0x4c8>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f9e3 	bl	8000b6c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7ff f9df 	bl	8000b6c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b64      	cmp	r3, #100	@ 0x64
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e103      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	4b75      	ldr	r3, [pc, #468]	@ (8001994 <HAL_RCC_OscConfig+0x4c8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x312>
 80017d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	e02d      	b.n	800183a <HAL_RCC_OscConfig+0x36e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x334>
 80017e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a69      	ldr	r2, [pc, #420]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6213      	str	r3, [r2, #32]
 80017f2:	4b67      	ldr	r3, [pc, #412]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a66      	ldr	r2, [pc, #408]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	e01c      	b.n	800183a <HAL_RCC_OscConfig+0x36e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_OscConfig+0x356>
 8001808:	4b61      	ldr	r3, [pc, #388]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a60      	ldr	r2, [pc, #384]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	4b5e      	ldr	r3, [pc, #376]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4a5d      	ldr	r2, [pc, #372]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6213      	str	r3, [r2, #32]
 8001820:	e00b      	b.n	800183a <HAL_RCC_OscConfig+0x36e>
 8001822:	4b5b      	ldr	r3, [pc, #364]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a5a      	ldr	r2, [pc, #360]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a57      	ldr	r2, [pc, #348]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d015      	beq.n	800186e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff f993 	bl	8000b6c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff f98f 	bl	8000b6c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0b1      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001860:	4b4b      	ldr	r3, [pc, #300]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ee      	beq.n	800184a <HAL_RCC_OscConfig+0x37e>
 800186c:	e014      	b.n	8001898 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff f97d 	bl	8000b6c <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff f979 	bl	8000b6c <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e09b      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188c:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ee      	bne.n	8001876 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d105      	bne.n	80018aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189e:	4b3c      	ldr	r3, [pc, #240]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8087 	beq.w	80019c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b4:	4b36      	ldr	r3, [pc, #216]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d061      	beq.n	8001984 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d146      	bne.n	8001956 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c8:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f94d 	bl	8000b6c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff f949 	bl	8000b6c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e06d      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fc:	d108      	bne.n	8001910 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4921      	ldr	r1, [pc, #132]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001910:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a19      	ldr	r1, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	430b      	orrs	r3, r1
 8001922:	491b      	ldr	r1, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x4cc>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff f91d 	bl	8000b6c <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff f919 	bl	8000b6c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e03d      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x46a>
 8001954:	e035      	b.n	80019c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_RCC_OscConfig+0x4cc>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff f906 	bl	8000b6c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f902 	bl	8000b6c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e026      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x498>
 8001982:	e01e      	b.n	80019c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e019      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
 8001998:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_RCC_OscConfig+0x500>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0d0      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b67      	ldr	r3, [pc, #412]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4965      	ldr	r1, [pc, #404]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b63      	ldr	r3, [pc, #396]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0b8      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a2c:	4b59      	ldr	r3, [pc, #356]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4a58      	ldr	r2, [pc, #352]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a44:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b50      	ldr	r3, [pc, #320]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	494d      	ldr	r1, [pc, #308]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d040      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b47      	ldr	r3, [pc, #284]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d115      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e07f      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b41      	ldr	r3, [pc, #260]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e073      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06b      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f023 0203 	bic.w	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4936      	ldr	r1, [pc, #216]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac0:	f7ff f854 	bl	8000b6c <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7ff f850 	bl	8000b6c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e053      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 020c 	and.w	r2, r3, #12
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1eb      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d210      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 0207 	bic.w	r2, r3, #7
 8001b06:	4922      	ldr	r1, [pc, #136]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e032      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4916      	ldr	r1, [pc, #88]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	490e      	ldr	r1, [pc, #56]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b5e:	f000 f821 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	490a      	ldr	r1, [pc, #40]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	5ccb      	ldrb	r3, [r1, r3]
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <HAL_RCC_ClockConfig+0x1cc>)
 8001b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe ffb2 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	080077a8 	.word	0x080077a8
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0x36>
 8001bd2:	e027      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bd6:	613b      	str	r3, [r7, #16]
      break;
 8001bd8:	e027      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0c9b      	lsrs	r3, r3, #18
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d010      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	0c5b      	lsrs	r3, r3, #17
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	fb03 f202 	mul.w	r2, r3, r2
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e004      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a0c      	ldr	r2, [pc, #48]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	613b      	str	r3, [r7, #16]
      break;
 8001c22:	e002      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c26:	613b      	str	r3, [r7, #16]
      break;
 8001c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2a:	693b      	ldr	r3, [r7, #16]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	007a1200 	.word	0x007a1200
 8001c40:	080077b8 	.word	0x080077b8
 8001c44:	080077c8 	.word	0x080077c8
 8001c48:	003d0900 	.word	0x003d0900

08001c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <RCC_Delay+0x34>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <RCC_Delay+0x38>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a5b      	lsrs	r3, r3, #9
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c68:	bf00      	nop
  }
  while (Delay --);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f9      	bne.n	8001c68 <RCC_Delay+0x1c>
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e076      	b.n	8001d88 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d108      	bne.n	8001cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001caa:	d009      	beq.n	8001cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
 8001cb2:	e005      	b.n	8001cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fdf4 	bl	80008c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d44:	ea42 0103 	orr.w	r1, r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	0c1a      	lsrs	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f002 0204 	and.w	r2, r2, #4
 8001d66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_SPI_Transmit+0x22>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e12d      	b.n	800200e <HAL_SPI_Transmit+0x27e>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dba:	f7fe fed7 	bl	8000b6c <HAL_GetTick>
 8001dbe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d002      	beq.n	8001dd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dd4:	e116      	b.n	8002004 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_SPI_Transmit+0x52>
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001de6:	e10d      	b.n	8002004 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e2e:	d10f      	bne.n	8001e50 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5a:	2b40      	cmp	r3, #64	@ 0x40
 8001e5c:	d007      	beq.n	8001e6e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e76:	d14f      	bne.n	8001f18 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_SPI_Transmit+0xf6>
 8001e80:	8afb      	ldrh	r3, [r7, #22]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d142      	bne.n	8001f0c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	1c9a      	adds	r2, r3, #2
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001eaa:	e02f      	b.n	8001f0c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d112      	bne.n	8001ee0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	1c9a      	adds	r2, r3, #2
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ede:	e015      	b.n	8001f0c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee0:	f7fe fe44 	bl	8000b6c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d803      	bhi.n	8001ef8 <HAL_SPI_Transmit+0x168>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d102      	bne.n	8001efe <HAL_SPI_Transmit+0x16e>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001f0a:	e07b      	b.n	8002004 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ca      	bne.n	8001eac <HAL_SPI_Transmit+0x11c>
 8001f16:	e050      	b.n	8001fba <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_Transmit+0x196>
 8001f20:	8afb      	ldrh	r3, [r7, #22]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d144      	bne.n	8001fb0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f4c:	e030      	b.n	8001fb0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d113      	bne.n	8001f84 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	330c      	adds	r3, #12
 8001f66:	7812      	ldrb	r2, [r2, #0]
 8001f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f82:	e015      	b.n	8001fb0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f84:	f7fe fdf2 	bl	8000b6c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d803      	bhi.n	8001f9c <HAL_SPI_Transmit+0x20c>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d102      	bne.n	8001fa2 <HAL_SPI_Transmit+0x212>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001fae:	e029      	b.n	8002004 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1c9      	bne.n	8001f4e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f9ae 	bl	8002320 <SPI_EndRxTxTransaction>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	77fb      	strb	r3, [r7, #31]
 8001ffa:	e003      	b.n	8002004 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800200c:	7ffb      	ldrb	r3, [r7, #31]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
    return;
 8002056:	e0b7      	b.n	80021c8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_SPI_IRQHandler+0x5e>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
    return;
 8002074:	e0a8      	b.n	80021c8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_SPI_IRQHandler+0x74>
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 809e 	beq.w	80021c8 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8098 	beq.w	80021c8 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d023      	beq.n	80020ea <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d011      	beq.n	80020d2 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	f043 0204 	orr.w	r2, r3, #4
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	e00b      	b.n	80020ea <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
        return;
 80020e8:	e06e      	b.n	80021c8 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	2b00      	cmp	r3, #0
 8002124:	d04f      	beq.n	80021c6 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002134:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_SPI_IRQHandler+0x13a>
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d034      	beq.n	80021bc <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0203 	bic.w	r2, r2, #3
 8002160:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d011      	beq.n	800218e <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_SPI_IRQHandler+0x1b8>)
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fe8e 	bl	8000e98 <HAL_DMA_Abort_IT>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219a:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <HAL_SPI_IRQHandler+0x1b8>)
 800219c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fe78 	bl	8000e98 <HAL_DMA_Abort_IT>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80021ba:	e003      	b.n	80021c4 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f809 	bl	80021d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80021c2:	e000      	b.n	80021c6 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80021c4:	bf00      	nop
    return;
 80021c6:	bf00      	nop
  }
}
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	080021e7 	.word	0x080021e7

080021d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff ffe7 	bl	80021d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002220:	f7fe fca4 	bl	8000b6c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002230:	f7fe fc9c 	bl	8000b6c <HAL_GetTick>
 8002234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002236:	4b39      	ldr	r3, [pc, #228]	@ (800231c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	0d1b      	lsrs	r3, r3, #20
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002246:	e054      	b.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d050      	beq.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002250:	f7fe fc8c 	bl	8000b6c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	429a      	cmp	r2, r3
 800225e:	d902      	bls.n	8002266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d13d      	bne.n	80022e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800227e:	d111      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002288:	d004      	beq.n	8002294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002292:	d107      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ac:	d10f      	bne.n	80022ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e017      	b.n	8002312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4013      	ands	r3, r2
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	429a      	cmp	r2, r3
 800230e:	d19b      	bne.n	8002248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000

08002320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ff6a 	bl	8002210 <SPI_WaitFlagStateUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e000      	b.n	8002354 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e041      	b.n	80023f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fb10 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f000 f966 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d001      	beq.n	8002414 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e032      	b.n	800247a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_TIM_Base_Start+0x88>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <HAL_TIM_Base_Start+0x48>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800242e:	d009      	beq.n	8002444 <HAL_TIM_Base_Start+0x48>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <HAL_TIM_Base_Start+0x8c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_TIM_Base_Start+0x48>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a13      	ldr	r2, [pc, #76]	@ (800248c <HAL_TIM_Base_Start+0x90>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d111      	bne.n	8002468 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b06      	cmp	r3, #6
 8002454:	d010      	beq.n	8002478 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002466:	e007      	b.n	8002478 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400
 800248c:	40000800 	.word	0x40000800

08002490 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_TIM_Base_Stop+0x38>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_TIM_Base_Stop+0x38>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_TIM_ConfigClockSource+0x1c>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e0b4      	b.n	8002662 <HAL_TIM_ConfigClockSource+0x186>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800251e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002530:	d03e      	beq.n	80025b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002536:	f200 8087 	bhi.w	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800253e:	f000 8086 	beq.w	800264e <HAL_TIM_ConfigClockSource+0x172>
 8002542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002546:	d87f      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b70      	cmp	r3, #112	@ 0x70
 800254a:	d01a      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0xa6>
 800254c:	2b70      	cmp	r3, #112	@ 0x70
 800254e:	d87b      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b60      	cmp	r3, #96	@ 0x60
 8002552:	d050      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002554:	2b60      	cmp	r3, #96	@ 0x60
 8002556:	d877      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b50      	cmp	r3, #80	@ 0x50
 800255a:	d03c      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0xfa>
 800255c:	2b50      	cmp	r3, #80	@ 0x50
 800255e:	d873      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 8002560:	2b40      	cmp	r3, #64	@ 0x40
 8002562:	d058      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x13a>
 8002564:	2b40      	cmp	r3, #64	@ 0x40
 8002566:	d86f      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 8002568:	2b30      	cmp	r3, #48	@ 0x30
 800256a:	d064      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15a>
 800256c:	2b30      	cmp	r3, #48	@ 0x30
 800256e:	d86b      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b20      	cmp	r3, #32
 8002572:	d060      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15a>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d867      	bhi.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d05c      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15a>
 800257c:	2b10      	cmp	r3, #16
 800257e:	d05a      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x15a>
 8002580:	e062      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002592:	f000 f944 	bl	800281e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	609a      	str	r2, [r3, #8]
      break;
 80025ae:	e04f      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c0:	f000 f92d 	bl	800281e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025d2:	609a      	str	r2, [r3, #8]
      break;
 80025d4:	e03c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e2:	461a      	mov	r2, r3
 80025e4:	f000 f8a4 	bl	8002730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2150      	movs	r1, #80	@ 0x50
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f8fb 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 80025f4:	e02c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002602:	461a      	mov	r2, r3
 8002604:	f000 f8c2 	bl	800278c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2160      	movs	r1, #96	@ 0x60
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f8eb 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 8002614:	e01c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	461a      	mov	r2, r3
 8002624:	f000 f884 	bl	8002730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2140      	movs	r1, #64	@ 0x40
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f8db 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 8002634:	e00c      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f000 f8d2 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 8002646:	e003      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e000      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800264e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a29      	ldr	r2, [pc, #164]	@ (8002724 <TIM_Base_SetConfig+0xb8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00b      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268a:	d007      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a26      	ldr	r2, [pc, #152]	@ (8002728 <TIM_Base_SetConfig+0xbc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a25      	ldr	r2, [pc, #148]	@ (800272c <TIM_Base_SetConfig+0xc0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d108      	bne.n	80026ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <TIM_Base_SetConfig+0xb8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a19      	ldr	r2, [pc, #100]	@ (8002728 <TIM_Base_SetConfig+0xbc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a18      	ldr	r2, [pc, #96]	@ (800272c <TIM_Base_SetConfig+0xc0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <TIM_Base_SetConfig+0xb8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d103      	bne.n	8002714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	615a      	str	r2, [r3, #20]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800

08002730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800275a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 030a 	bic.w	r3, r3, #10
 800276c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f023 0210 	bic.w	r2, r3, #16
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	031b      	lsls	r3, r3, #12
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	f043 0307 	orr.w	r3, r3, #7
 800280c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800281e:	b480      	push	{r7}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002838:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	021a      	lsls	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	431a      	orrs	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4313      	orrs	r3, r2
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	609a      	str	r2, [r3, #8]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002870:	2302      	movs	r3, #2
 8002872:	e046      	b.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a16      	ldr	r2, [pc, #88]	@ (800290c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c0:	d009      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a12      	ldr	r2, [pc, #72]	@ (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a10      	ldr	r2, [pc, #64]	@ (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10c      	bne.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800

08002918 <memset>:
 8002918:	4603      	mov	r3, r0
 800291a:	4402      	add	r2, r0
 800291c:	4293      	cmp	r3, r2
 800291e:	d100      	bne.n	8002922 <memset+0xa>
 8002920:	4770      	bx	lr
 8002922:	f803 1b01 	strb.w	r1, [r3], #1
 8002926:	e7f9      	b.n	800291c <memset+0x4>

08002928 <__libc_init_array>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	2600      	movs	r6, #0
 800292c:	4d0c      	ldr	r5, [pc, #48]	@ (8002960 <__libc_init_array+0x38>)
 800292e:	4c0d      	ldr	r4, [pc, #52]	@ (8002964 <__libc_init_array+0x3c>)
 8002930:	1b64      	subs	r4, r4, r5
 8002932:	10a4      	asrs	r4, r4, #2
 8002934:	42a6      	cmp	r6, r4
 8002936:	d109      	bne.n	800294c <__libc_init_array+0x24>
 8002938:	f000 f81a 	bl	8002970 <_init>
 800293c:	2600      	movs	r6, #0
 800293e:	4d0a      	ldr	r5, [pc, #40]	@ (8002968 <__libc_init_array+0x40>)
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <__libc_init_array+0x44>)
 8002942:	1b64      	subs	r4, r4, r5
 8002944:	10a4      	asrs	r4, r4, #2
 8002946:	42a6      	cmp	r6, r4
 8002948:	d105      	bne.n	8002956 <__libc_init_array+0x2e>
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002950:	4798      	blx	r3
 8002952:	3601      	adds	r6, #1
 8002954:	e7ee      	b.n	8002934 <__libc_init_array+0xc>
 8002956:	f855 3b04 	ldr.w	r3, [r5], #4
 800295a:	4798      	blx	r3
 800295c:	3601      	adds	r6, #1
 800295e:	e7f2      	b.n	8002946 <__libc_init_array+0x1e>
 8002960:	080077cc 	.word	0x080077cc
 8002964:	080077cc 	.word	0x080077cc
 8002968:	080077cc 	.word	0x080077cc
 800296c:	080077d0 	.word	0x080077d0

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
